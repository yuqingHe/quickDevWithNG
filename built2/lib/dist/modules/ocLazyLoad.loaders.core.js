(function(angular){"use strict";angular.module("oc.lazyLoad").config(["$provide",function($provide){$provide.decorator("$ocLazyLoad",["$delegate","$q",function($delegate,$q){return $delegate.filesLoader=function filesLoader(config){var params=arguments.length<=1||arguments[1]===undefined?{}:arguments[1],cssFiles=[],templatesFiles=[],jsFiles=[],promises=[],cachePromise=null,filesCache=$delegate._getFilesCache();$delegate.toggleWatch(!0),angular.extend(params,config);var pushFile=function pushFile(path){var file_type=null,m;angular.isObject(path)&&(file_type=path.type,path=path.path),cachePromise=filesCache.get(path);if(angular.isUndefined(cachePromise)||params.cache===!1){(m=/^(css|less|html|htm|js)?(?=!)/.exec(path))!==null&&(file_type=m[1],path=path.substr(m[1].length+1,path.length));if(!file_type)if((m=/[.](css|less|html|htm|js)?((\?|#).*)?$/.exec(path))!==null)file_type=m[1];else{if(!!$delegate.jsLoader.hasOwnProperty("ocLazyLoadLoader")||!$delegate.jsLoader.hasOwnProperty("requirejs")){$delegate._$log.error("File type could not be determined. "+path);return}file_type="js"}file_type!=="css"&&file_type!=="less"||cssFiles.indexOf(path)!==-1?file_type!=="html"&&file_type!=="htm"||templatesFiles.indexOf(path)!==-1?file_type==="js"||jsFiles.indexOf(path)===-1?jsFiles.push(path):$delegate._$log.error("File type is not valid. "+path):templatesFiles.push(path):cssFiles.push(path)}else cachePromise&&promises.push(cachePromise)};params.serie?pushFile(params.files.shift()):angular.forEach(params.files,function(path){pushFile(path)});if(cssFiles.length>0){var cssDeferred=$q.defer();$delegate.cssLoader(cssFiles,function(err){angular.isDefined(err)&&$delegate.cssLoader.hasOwnProperty("ocLazyLoadLoader")?($delegate._$log.error(err),cssDeferred.reject(err)):cssDeferred.resolve()},params),promises.push(cssDeferred.promise)}if(templatesFiles.length>0){var templatesDeferred=$q.defer();$delegate.templatesLoader(templatesFiles,function(err){angular.isDefined(err)&&$delegate.templatesLoader.hasOwnProperty("ocLazyLoadLoader")?($delegate._$log.error(err),templatesDeferred.reject(err)):templatesDeferred.resolve()},params),promises.push(templatesDeferred.promise)}if(jsFiles.length>0){var jsDeferred=$q.defer();$delegate.jsLoader(jsFiles,function(err){angular.isDefined(err)&&($delegate.jsLoader.hasOwnProperty("ocLazyLoadLoader")||$delegate.jsLoader.hasOwnProperty("requirejs"))?($delegate._$log.error(err),jsDeferred.reject(err)):jsDeferred.resolve()},params),promises.push(jsDeferred.promise)}if(promises.length===0){var deferred=$q.defer(),err="Error: no file to load has been found, if you're trying to load an existing module you should use the 'inject' method instead of 'load'.";return $delegate._$log.error(err),deferred.reject(err),deferred.promise}return params.serie&&params.files.length>0?$q.all(promises).then(function(){return $delegate.filesLoader(config,params)}):$q.all(promises)["finally"](function(res){return $delegate.toggleWatch(!1),res})},$delegate.load=function(originalModule){var originalParams=arguments.length<=1||arguments[1]===undefined?{}:arguments[1],self=this,config=null,deferredList=[],deferred=$q.defer(),errText,module=angular.copy(originalModule),params=angular.copy(originalParams);if(angular.isArray(module))return angular.forEach(module,function(m){deferredList.push(self.load(m,params))}),$q.all(deferredList).then(function(res){deferred.resolve(res)},function(err){deferred.reject(err)}),deferred.promise;angular.isString(module)?(config=self.getModuleConfig(module),config||(config={files:[module]})):angular.isObject(module)&&(angular.isDefined(module.path)&&angular.isDefined(module.type)?config={files:[module]}:config=self.setModuleConfig(module));if(config===null){var moduleName=self._getModuleName(module);return errText='Module "'+(moduleName||"unknown")+'" is not configured, cannot load.',$delegate._$log.error(errText),deferred.reject(new Error(errText)),deferred.promise}angular.isDefined(config.template)&&(angular.isUndefined(config.files)&&(config.files=[]),angular.isString(config.template)?config.files.push(config.template):angular.isArray(config.template)&&config.files.concat(config.template));var localParams=angular.extend({},params,config);return angular.isUndefined(config.files)&&angular.isDefined(config.name)&&$delegate.moduleExists(config.name)?$delegate.inject(config.name,localParams,!0):($delegate.filesLoader(config,localParams).then(function(){$delegate.inject(null,localParams).then(function(res){deferred.resolve(res)},function(err){deferred.reject(err)})},function(err){deferred.reject(err)}),deferred.promise)},$delegate}])}])})(angular);